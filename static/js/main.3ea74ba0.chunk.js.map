{"version":3,"sources":["SeasonDisplay.js","LoadingView.js","index.js"],"names":["seasonConfig","smmer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","LoadingView","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"kOAGOA,G,cAAe,CAClBC,MAAO,CACHC,KAAM,iBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,oBACNC,SAAU,eAyBHE,EAbO,SAAAC,GAClB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAO,EACbD,EAAI,EAAI,SAAW,SAEnBA,EAAI,EAAI,SAAW,UAIH,EAEAP,EAAaS,GAAhCP,EAFmB,EAEnBA,KAAMC,EAFa,EAEbA,SAEd,OACI,sBAAKS,UAAS,yBAAoBH,GAAlC,UACI,mBAAGG,UAAS,oBAAeT,EAAf,WACZ,6BAAKD,IACL,mBAAGU,UAAS,qBAAgBT,EAAhB,eCpBTU,EARK,SAAAP,GAClB,OACE,qBAAKM,UAAU,mBAAf,SACE,qBAAKA,UAAU,qBAAf,SAAqCN,EAAMJ,UCC3CY,E,4MAEJC,MAAQ,CAAER,IAAK,KAAMS,aAAa,I,kEAEb,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEf,IAAKc,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAACN,aAAcS,EAAIC,e,+BAK1C,OAAIC,KAAKZ,MAAMC,eAAiBW,KAAKZ,MAAMR,IAClC,0CAAcoB,KAAKZ,MAAMC,iBAE7BW,KAAKZ,MAAMC,cAAgBW,KAAKZ,MAAMR,IAEzC,8BACE,cAAC,EAAD,CAAeA,IAAKoB,KAAKZ,MAAMR,QAI9BoB,KAAKZ,MAAMC,cAAiBW,KAAKZ,MAAMR,SAA5C,EACS,cAAC,EAAD,CAAaL,KAAK,mC,GAvBb0B,IAAMC,WA4BxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.3ea74ba0.chunk.js","sourcesContent":["import React from 'react';\nimport './SeasonDisplay.css';\n\nconst  seasonConfig = {\n    smmer: {\n        text: 'let\\s go beach!',\n        iconName: 'sun'\n    },\n    winter: {\n        text: 'Burr, it\\'s chilly',\n        iconName: 'snowflake'\n    }\n}\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month <9) {\n        return lat>0 ? 'summer' : 'winter';\n    }  else {\n        return lat>0 ? 'winter' : 'summer';\n    }\n}\n\nconst SeasonDisplay = props => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season]; \n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={`icon-right ${iconName} icon`} />\n        </div>\n    )\n}\n\nexport default SeasonDisplay","import React from 'react'\n\nconst LoadingView = props => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.text}</div>\n    </div>\n  )\n};\n\nexport default LoadingView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport faker from 'faker'\nimport SeasonDisplay from './SeasonDisplay';\nimport LoadingView from './LoadingView';\n\nclass App extends React.Component {\n\n  state = { lat: null, errorMessage:'' };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ lat: position.coords.latitude }),\n      err => this.setState({errorMessage: err.message })\n    );\n  }\n  // React says we have to define render!!\n  render() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: { this.state.errorMessage }</div>\n    }\n    if (!this.state.errorMessage && this.state.lat) {\n      return (\n      <div>\n        <SeasonDisplay lat={this.state.lat} />\n      </div>\n      )\n    }\n    if (!this.state.errorMessage && !this.state.lat) {\n      return <LoadingView text=\"Please allow your location\"/>\n    }\n  }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}